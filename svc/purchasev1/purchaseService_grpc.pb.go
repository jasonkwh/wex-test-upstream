// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: purchaseService.proto

package purchasev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PurchaseService_SavePurchaseTransaction_FullMethodName = "/purchase.PurchaseService/SavePurchaseTransaction"
	PurchaseService_GetPurchaseTransaction_FullMethodName  = "/purchase.PurchaseService/GetPurchaseTransaction"
)

// PurchaseServiceClient is the client API for PurchaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurchaseServiceClient interface {
	SavePurchaseTransaction(ctx context.Context, in *SavePurchaseRequest, opts ...grpc.CallOption) (*GetPurchaseResponse, error)
	GetPurchaseTransaction(ctx context.Context, in *GetPurchaseRequest, opts ...grpc.CallOption) (*GetPurchaseResponse, error)
}

type purchaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchaseServiceClient(cc grpc.ClientConnInterface) PurchaseServiceClient {
	return &purchaseServiceClient{cc}
}

func (c *purchaseServiceClient) SavePurchaseTransaction(ctx context.Context, in *SavePurchaseRequest, opts ...grpc.CallOption) (*GetPurchaseResponse, error) {
	out := new(GetPurchaseResponse)
	err := c.cc.Invoke(ctx, PurchaseService_SavePurchaseTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) GetPurchaseTransaction(ctx context.Context, in *GetPurchaseRequest, opts ...grpc.CallOption) (*GetPurchaseResponse, error) {
	out := new(GetPurchaseResponse)
	err := c.cc.Invoke(ctx, PurchaseService_GetPurchaseTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchaseServiceServer is the server API for PurchaseService service.
// All implementations must embed UnimplementedPurchaseServiceServer
// for forward compatibility
type PurchaseServiceServer interface {
	SavePurchaseTransaction(context.Context, *SavePurchaseRequest) (*GetPurchaseResponse, error)
	GetPurchaseTransaction(context.Context, *GetPurchaseRequest) (*GetPurchaseResponse, error)
	mustEmbedUnimplementedPurchaseServiceServer()
}

// UnimplementedPurchaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPurchaseServiceServer struct {
}

func (UnimplementedPurchaseServiceServer) SavePurchaseTransaction(context.Context, *SavePurchaseRequest) (*GetPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePurchaseTransaction not implemented")
}
func (UnimplementedPurchaseServiceServer) GetPurchaseTransaction(context.Context, *GetPurchaseRequest) (*GetPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseTransaction not implemented")
}
func (UnimplementedPurchaseServiceServer) mustEmbedUnimplementedPurchaseServiceServer() {}

// UnsafePurchaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchaseServiceServer will
// result in compilation errors.
type UnsafePurchaseServiceServer interface {
	mustEmbedUnimplementedPurchaseServiceServer()
}

func RegisterPurchaseServiceServer(s grpc.ServiceRegistrar, srv PurchaseServiceServer) {
	s.RegisterService(&PurchaseService_ServiceDesc, srv)
}

func _PurchaseService_SavePurchaseTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).SavePurchaseTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseService_SavePurchaseTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).SavePurchaseTransaction(ctx, req.(*SavePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_GetPurchaseTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).GetPurchaseTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseService_GetPurchaseTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).GetPurchaseTransaction(ctx, req.(*GetPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PurchaseService_ServiceDesc is the grpc.ServiceDesc for PurchaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PurchaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "purchase.PurchaseService",
	HandlerType: (*PurchaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePurchaseTransaction",
			Handler:    _PurchaseService_SavePurchaseTransaction_Handler,
		},
		{
			MethodName: "GetPurchaseTransaction",
			Handler:    _PurchaseService_GetPurchaseTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "purchaseService.proto",
}
